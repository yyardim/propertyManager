-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
CommonJS modules
-------------------------------------------------------------------------------------------------------------------------------------
CommonJS is a project started in 2009 to standardize the way of working with JavaScript outside the browser. It has three keys
components when working with modules:
* require():  This method is used to load the module into your code
* exports:    This object is contained in each module and allows you to expose pieces of your code when the module is loaded
* module:     This object was originally used to provide metadata information about the module. It also contains the pointer 
              of an exports object as a property. However, the popular implementation of the exports object as a standalone 
              object literally changed the use case of the module object

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
Express
-------------------------------------------------------------------------------------------------------------------------------------
Express is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially
a series of middleware function calls. Middleware functions are functions that have access to the req, res, and the next middleware 
function in the application's request-response cycle. The next middleware function is commonly denoted by a variable named next.

Middleware functions can perform the following tasks:
* Execute any code
* Make changes to the request and the response objects
* End the request-response cycle
* Call the next middleware function in the stack

Express presents 3 major objects: application, request, response
* application:    instance of an Express application, used to configure your application
* request:        a wrapper of Node's HTTP request object and is used to extract info about the currently handled HTTP request
* response:       a wrapper of Node's HTTP response object and is used to set the response data & headers

application object
------------------
app.set(name, value):   used to set environment variables that Express will use in its configuration
app.get(name):          used to get environment variables that Express is using in its configuration
app.VERB(path, [callback...], callback):   
                        used to define one or more middleware functions to respond to HTTP requests made to a 
                        certain path in conjunction with the HTTP verb declared. i.e. app.get() 
app.use([path], callback):  
                        used to create an Express middleware to handle HTTP requests sent to the server. Optionally, you'll be
                        able to mount middleware to respond to certain paths.
app.route(path) .VERB([callback...], callback): 
                        used to define one or more middleware functions to respond to HTTP requests made to a certain unified
                        path in conjunction with multiple HTTP verbs. For instance, when you want to respond to requests that
                        are using the GET and POST verbs, you can just assign the appropriate middleware functions using
                        app.route(path).get(callback).post(callback)
app.param([name], callback):
                        used to attach a certain functionality to any request made to a path that includes a certain routing
                        parameter. app.param('userId', callback)
app.render():           used to render the view and then pass the HTML to a callback function (less common than res.render)

response object
---------------
res.render(view, [locals], callback):   used to render a view & send an HTML response

express.static(root, [options]): the only built-in middleware function in Express to serve static files such as images, CSS files and 
                        JavaScript files 
    app.use(express.static('public'));

morgan: an HTTP request logger middleware for node.js

body-parser: body-parsing middleware that's used to parse the request body, and it supports various request types.
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
nodemon
-------------------------------------------------------------------------------------------------------------------------------------
For use during development of a node.js based application.

nodemon will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically
restart your node application.

nodemon does not require any changes to your code or method of development. nodemon simply wraps your node application and keeps 
an eye on any files that have changed. Remember that nodemon is a replacement wrapper for node, think of it as replacing the word
"node" on the command line when you run your script.

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
Stylus
-------------------------------------------------------------------------------------------------------------------------------------
a CSS-preprocessor. provides an efficient, dynamic and expressive way to generate CSS. similar to LESS or SASS.

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
angular-resource
-------------------------------------------------------------------------------------------------------------------------------------
angular.module('app', ['ngResource']);
The ngResource module provides interaction support with RESTful services via the $resource service.

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
$location
-------------------------------------------------------------------------------------------------------------------------------------
The $location service parses the URL in the browser address bar (based on window.location) and makes the URL available to your app.
Changes to the URL in the address bar are reflected into the $location service and changes to $location are reflected into the browser 
address bar.

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
Mongoose
-------------------------------------------------------------------------------------------------------------------------------------
is a Node.js ODM module that adds MongoDB support to your Express application. 
* uses schemas to model your entities
* offers predefined validation along with custom validations
* allows you to define virtual attributes
* uses middleware hooks to intercept operations 

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
Heroku
-------------------------------------------------------------------------------------------------------------------------------------
* web hosting site 
* initial commands: Console
    heroku create   //creates app
    heroku login
    heroku config:set NODE_ENV=production
    heroku ps:scale web=1
* Error handling: Console
    heroku logs
    heroku restart
    heroku keys         // lists the keys heroku has for you
    heroku keys:add     // add your keys
    heroku keys:clear   // remove all keys from heroku
    heroku keys:remove yyardim@gmail.com    // remove keys associated to this email
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
mLab
-------------------------------------------------------------------------------------------------------------------------------------
* Db Hosting site
* Console login

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
mLab
-------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
git
-------------------------------------------------------------------------------------------------------------------------------------
* once logged in heroku, ran these commands to deploy
* git remote -v             // to list remotes
* git push heroku master

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
mongo
-------------------------------------------------------------------------------------------------------------------------------------
>show dbs
>use propertymanager
>show collections
>db.dropDatabase()

system.indexes is another collection that's there, holding the list of db indexes
>db.posts.drop()

CRUD: 
>db.posts.insert({"title":"first post","user":"bob"})
>db.posts.update({"user":"alice"},{"title":"second post", "user":"alice"}, {upsert: true})
>db.posts.save({"title":"second post","user":"alice"})

>db.posts.find()
>db.posts.find({})
>db.posts.find({"user":"alice"})
>db.posts.find({"user": {$in: ["alice","bob"]} })
>db.posts.find({"user":"alice", "commentsCount": { $gt: 10 } }) //AND
>db.posts.find({ $or: [{ "user":"alice" }, { "user":"bob" }] })

>db.posts.update({
  "user": "alice"           // selection criteria
}, {
  $set: {                   // update statement
    "title": "Second Post"
  }
}, {
  multi: true               // options
})

>db.posts.save({            // if save cannot find, it creates one
  "_id": ObjectId("5069345j934oijerad494993"),
  "title": "Second Post",
  "user": "alice"
})

>db.posts.remove({"user":"alice"})  // removes all documents that match
>db.posts.remove({"user":"alice"}, true)    // removes first that match

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
HTTP
-------------------------------------------------------------------------------------------------------------------------------------
HTTP functions as a request-response protocol in the client-server computing model. The client submits an HTTP request message
to the server. The server, which provides resources such as HTML files and other content, or performs other functions on behalf
of the client, returns a response message to the client. The reponse contains completion status information about the request
and may also contain requested content in its message body.

HTTP resources are identified and located on the network by URLs using the URI schemes http and https. 

HTTP session is a sequence of network request-response transactions. An HTTP client initiates a request by establishing a TCP
connection to a particular port on a server, typically port 80. An HTTP server listening on that port waits for a client's
request message. Upon receiving the request, the server sends back a status line, such as "HTTP/1.1 200 OK", and a message of
its own. The body of the essage is typically the requested resource, although an error message or other information may be returned.

HTTP provides a general framework for access control and authentication, via an extensible set of challenge-response authentication
schemes.

HTTP defines methods (verbs) to indicate the desired action to be performed on the identified resource.
- GET   - requests a representation of the specified resource. 
- HEAD  - asks for a response identical to that of a GET request, but without the response body. 
- POST  - requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified
          by the URI. The data POSTed might be, a block of data resultant of a web form to a data-handling process, item to add
          to a database, etc
- PUT   - requests that the enclosed entity be stored undes the supplied URI. If the URI refers to an already existing resource,
          it is modified; otherwise server can create the resource with that URI.
- DELETE- deletes the specified resource
- PATCH - applies partial modification to a resource

HTTP is a stateless protocol. It does not require the HTTP server to retain information or status about each user for the duration
of multiple requests.

Client-side sessions use cookies and cryptographic techniques to maintain state without storing as much data on the server.
The server sends the current state data to the client in the form of a cookie. The client saves the cookie in memory or in disk.
With each successive request, the client sends the cookie back to the server, and the server uses the data to remember the state
of the application for that specific client and generate an appropriate response.

HTTP session token is a unique identifier, usually in the form of a has generated by a hash function sent from a server to a client
to identify the current interaction session. The client usually stores and sends the token as an HTTP cookie and sends it as a
parameter in GET/POST queries. The reason to use session tokens is that the client only has to handle the identifier - all session
data is stored on the server (usually in a database).

Session ID
A session ID is typically granted to a visitor on his first visit to a site. It's used to identify a user that has logged into
a website. Is often randomly generated string. 

COOKIE
HTTP cookie is a small piece of data sent from a website and stored in the user's browser while browsing. Every time the user loads
the website, the browser sends the cookie back to the server to notify the user's previous activity.
Authentication cookies are the most common method used by web servers to know whether the user is logged in or not.
Session Cookie    -   (in-memory cookie) exists only in temporary memory, while the user navigates the website. Normally deleted when
                    the user closes the browser.
Persistent Cookie - Expires at a specific date or after a length of time. Used to keep users logged in to a site, or by advertisers
                    to record information about user's browsing habits.
Secure Cookie     - Requires HTTPS. browsers will only send cookies with the secure flag when the request is going to a HTTPS page.

Cookies are set using the HTTP 'Set-Cookie' header, sent in an HTTP response. This header instructs the browser to store the cookie
and send it back in future requests to the server.
Request 1:
----------
GET /index.html HTTP/1.1
Host: www.example.org

Respond 1:
----------
HTTP/1.0 200 OK
Content-type: text/html
Content-Type: text/html; charset=UTF-8
Content-Encoding: UTF-8
Content-Length: 138
Set-Cookie: theme-light
Set-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2020

<html>
<head>
  <title>bla</title>
</head>
<body>
  Hello world
</body>
</html>

Request 2:
----------
GET /spec.html HTTP/1.1
Host: www.example.org
Cookie: theme-light; sessionToken=abc123

Cookies can have name/value but also additional attributes as well.

Request Message
---------------
- A request line (GET /images/logo.png HTTP/1.1
- Request header fields (Accept-Language: en)
- Empty line
- Message body

Response Message
----------------
- Status line (HTTP/1.1 200 OK)
- Response header fields (Content-Type: text/html)
- Empty line
- Message body

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
Other Notes
-------------------------------------------------------------------------------------------------------------------------------------
* This year, I'll have 5 projects up and running. 1 will be a promising one. At least. This is my 2016 resolution.